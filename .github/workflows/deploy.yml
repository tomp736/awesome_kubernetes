name: 'Deploy'

on:
  workflow_call:
    inputs:
      TF_WORKSPACE:
        type: string
        description: Terraform Remote Workspace
        required: true
      TF_MODULES_REF:
        type: string
        description: Terraform Modules Ref
        required: true
      ANSIBLE_MODULES_REF:
        type: string
        description: Ansible Modules Ref
        required: true
      FLUX_WORKSPACE:
        type: string
        description: Flux Workspace
        required: true
      TERRAFORM_APPLY:
        type: boolean
        description: Apply Terraform
        required: true
        default: false
      ANSIBLE_APPLY:
        type: boolean
        description: Apply Ansible
        required: true
        default: false
      LIFETIME:
        type: string
        description: Lifetime of cluster (minutes).
        required: true
  workflow_dispatch:
    inputs:
      TF_WORKSPACE:
        type: choice
        description: Terraform Remote Workspace
        required: true
        options: 
        - "none"
        - tomp736
      TF_MODULES_REF:
        type: choice
        description: Terraform Modules Ref
        required: true
        options: 
        - main
        - dev
      ANSIBLE_MODULES_REF:
        type: choice
        description: Ansible Modules Ref
        required: true
        options: 
        - main
        - dev
      FLUX_WORKSPACE:
        type: choice
        description: Flux Workspace
        required: true
        options: 
        - tomp736
      TERRAFORM_APPLY:
        type: boolean
        description: Apply Terraform
        required: true
        default: false
      ANSIBLE_APPLY:
        type: boolean
        description: Apply Ansible
        required: true
        default: false
      LIFETIME:
        type: choice
        description: Lifetime of cluster (minutes).
        required: true
        options:
        - 1m
        - 30m
        - 60m

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  RESOURCE_PREFIX: ${{ inputs.TF_WORKSPACE != 'none' && inputs.TF_WORKSPACE || github.sha }}
  TF_BACKEND: ${{ inputs.TF_WORKSPACE != 'none' && 'config.remote.tfbackend' || '' }}

permissions:
  contents: read

jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    environment: "${{ inputs.TF_WORKSPACE }}"
    concurrency: 
      group: ${{ inputs.TF_WORKSPACE == 'none' && github.sha || inputs.TF_WORKSPACE }}
      cancel-in-progress: false      
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ env.BRANCH_NAME }}
    - 
      name: Create keypair for test.
      run: |
        ssh-keygen -t ed25519 -N '' -f id_ed25519
        xargs -a id_ed25519 -I{} -d'\n' echo ::add-mask::{}
        xargs -a id_ed25519.pub -I{} -d'\n' echo ::add-mask::{}
    - 
      name: Load keypair for test.
      run: |
        echo "Loading KEYFILE \"id_ed25519\" into GITHUB_ENV."
        echo 'KEYFILE<<EOF' >> $GITHUB_ENV
        cat id_ed25519 >> $GITHUB_ENV
        echo EOF >> $GITHUB_ENV

        echo "Loading PUBKEYFILE \"id_ed25519.pub\" into GITHUB_ENV."
        echo 'PUBKEYFILE<<EOF' >> $GITHUB_ENV
        cat id_ed25519.pub >> $GITHUB_ENV
        echo EOF >> $GITHUB_ENV
    - 
      name: Create default.tfvars file
      run: |
        echo "hcloud_token = \"${{ secrets.HCLOUD_TOKEN }}\"" >> default.tfvars
        echo "public_key = \"${{ env.PUBKEYFILE }}\"" >> default.tfvars
    - 
      if: ${{ inputs.TF_WORKSPACE != 'none' }}
      name: Apply changes for remote backend
      run: |
        echo "Create default.tfrc file"
        echo "# default.tfrc" > default.tfrc
        echo "credentials \"app.terraform.io\" {" >> default.tfrc
        echo "  token = \"${{ secrets.TFCLOUD_TOKEN }}\"" >> default.tfrc
        echo "}" >> default.tfrc

        echo "Create config.remote.tfbackend"
        echo "# config.remote.tfbackend" > config.remote.tfbackend
        echo "workspaces { name = \"kubernetes_at_hetzner_${{ inputs.TF_WORKSPACE }}\" }" >> config.remote.tfbackend
        echo "hostname     = \"app.terraform.io\"" >> config.remote.tfbackend
        echo "organization = \"labrats-work\"" >> config.remote.tfbackend 

        echo "Create config.remote.tfbackend"
        sed -i 's|local|remote|g' providers.tf
    - 
      name: Update prefix for resources.
      run: |
        sed -i 's|{prefix}|${{ env.RESOURCE_PREFIX }}|g' files/config.json
    - 
      name: Update Terraform Ref
      run: |
        sed -i 's|modules-terraform.git//modules/cloud-init?ref=main|modules-terraform.git//modules/cloud-init?ref=${{ inputs.TF_MODULES_REF }}|g' main.tf
        sed -i 's|modules-terraform.git//modules/hetzner/network?ref=main|modules-terraform.git//modules/hetzner/network?ref=${{ inputs.TF_MODULES_REF }}|g' main.tf
        sed -i 's|modules-terraform.git//modules/hetzner/node?ref=main|modules-terraform.git//modules/hetzner/node?ref=${{ inputs.TF_MODULES_REF }}|g' main.tf
    - 
      name: Update Ansible Ref
      run: |
        sed -i 's|version: main|version: ${{ inputs.ANSIBLE_MODULES_REF }}|g' ansible/requirements.yml
    - 
      name: Terraform Plan
      uses: labrats-work/action-terraform@main
      with:
        verb: plan
        init: yes
        varsFile: default.tfvars
        planFile: tfplan
        backendConfigFile: ${{ env.TF_BACKEND }}
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      name: Terraform Apply
      if: inputs.TERRAFORM_APPLY 
      uses: labrats-work/action-terraform@main
      with:
        verb: apply
        init: yes
        planFile: tfplan
        backendConfigFile: ${{ env.TF_BACKEND }}
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      if: inputs.TERRAFORM_APPLY && inputs.ANSIBLE_APPLY
      name: Run playbook
      uses: labrats-work/action-ansible@main
      with:
        workingDirectory: ./ansible
        inventoryFile: inventory/hosts
      env:
        FLUX_INIT_OWNER: tomp736
        FLUX_INIT_REPO: kubernetes_at_hetzner_flux
        FLUX_INIT_PATH: ./clusters/${{ inputs.FLUX_WORKSPACE }}
        FLUX_INIT_TOKEN: ${{ secrets.FLUX_INIT_TOKEN }}
    - 
      if: inputs.TERRAFORM_APPLY
      name: Cluster Timeout
      run: |
        echo "Will destroy cluster in ${{ inputs.LIFETIME }}."
        sleep ${{ inputs.LIFETIME }}
    - 
      if: always() && inputs.TERRAFORM_APPLY
      id: destroy
      continue-on-error: true
      name: Terraform Destroy
      uses: labrats-work/action-terraform@main
      with:
        verb: destroy
        init: yes
        varsFile: default.tfvars
        backendConfigFile: ${{ env.TF_BACKEND }}
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      if: always() && inputs.TERRAFORM_APPLY && steps.destroy.outcome == 'failure'
      id: destroy2
      continue-on-error: true
      name: Terraform Destroy
      uses: labrats-work/action-terraform@main
      with:
        verb: destroy
        init: yes
        varsFile: default.tfvars
        backendConfigFile: ${{ env.TF_BACKEND }}
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      if: always() && inputs.TERRAFORM_APPLY  && steps.destroy2.outcome == 'failure'
      id: destroy3
      continue-on-error: true
      name: Terraform Destroy
      uses: labrats-work/action-terraform@main
      with:
        verb: destroy
        init: yes
        varsFile: default.tfvars
        backendConfigFile: ${{ env.TF_BACKEND }}
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    
