name: 'Deploy'

on:
  workflow_dispatch:
    inputs:
      workspace:
        type: choice
        description: Workspace to use
        options: 
        - tomp736
      lifetime:
        type: choice
        description: Lifetime of cluster (minutes).
        options:
        - 1m
        - 30m
        - 60m

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  TF_WORKSPACE: ${{ github.event.inputs.workspace || github.head_ref || github.ref_name }}
  TF_LIFETIME: ${{ github.event.inputs.lifetime || github.head_ref || github.ref_name }}

permissions:
  contents: read

jobs:
  deploy:
    name: 'Test E2E'
    runs-on: ubuntu-latest
    concurrency: 
      group: ${{ github.head_ref || github.ref_name }}
      cancel-in-progress: false      
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ env.BRANCH_NAME }}
    - 
      name: Create keypair for test.
      run: |
        ssh-keygen -t ed25519 -N '' -f id_ed25519
        xargs -a id_ed25519 -I{} -d'\n' echo ::add-mask::{}
        xargs -a id_ed25519.pub -I{} -d'\n' echo ::add-mask::{}
    - 
      name: Load keypair for test.
      run: |
        echo "Loading KEYFILE \"id_ed25519\" into GITHUB_ENV."
        echo 'KEYFILE<<EOF' >> $GITHUB_ENV
        cat id_ed25519 >> $GITHUB_ENV
        echo EOF >> $GITHUB_ENV

        echo "Loading PUBKEYFILE \"id_ed25519.pub\" into GITHUB_ENV."
        echo 'PUBKEYFILE<<EOF' >> $GITHUB_ENV
        cat id_ed25519.pub >> $GITHUB_ENV
        echo EOF >> $GITHUB_ENV
    - 
      name: Create default.tfvars file
      run: |
        echo "hcloud_token = \"${{ secrets.HCLOUD_TOKEN }}\"" >> default.tfvars
        echo "public_key = \"${{ env.PUBKEYFILE }}\"" >> default.tfvars
    - 
      name: Create default.tfrc file
      run: |
        echo "# default.tfrc" > default.tfrc
        echo "credentials \"app.terraform.io\" {" >> default.tfrc
        echo "  token = \"${{ secrets.TFCLOUD_TOKEN }}\"" >> default.tfrc
        echo "}" >> default.tfrc
    -
      name: Create config.remote.tfbackend
      run: | 
        echo "# config.remote.tfbackend" > config.remote.tfbackend
        echo "workspaces { name = \"kubernetes_at_hetzner_${{ env.TF_WORKSPACE }}\" }" >> config.remote.tfbackend
        echo "hostname     = \"app.terraform.io\"" >> config.remote.tfbackend
        echo "organization = \"labrats-work\"" >> config.remote.tfbackend 
    -
      name: Update provider to use remote for this run.
      run: |
        sed -i 's|local|remote|g' providers.tf
    - 
      name: Update prefix for node names.
      run: |
        sed -i 's|{prefix}|${{ env.BRANCH_NAME }}|g' files/node_config.json
    - 
      name: Terraform Plan
      uses: labrats-work/action-terraform@main
      with:
        verb: plan
        init: yes
        varsFile: default.tfvars
        planFile: tfplan
        backendConfigFile: config.remote.tfbackend
        sshKey: ${{ env.KEYFILE }}
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      name: Terraform Apply
      uses: labrats-work/action-terraform@main
      with:
        verb: apply
        init: yes
        planFile: tfplan
        backendConfigFile: config.remote.tfbackend
        sshKey: ${{ env.KEYFILE }}
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      name: Cache Ansible Collections
      uses: actions/cache@v3
      with:
        key: ansible-${{ env.BRANCH_NAME }}
        path: |
          ~/.ansible/collections
    - 
      name: Run playbook
      uses: labrats-work/action-ansible@main
      with:
        workingDirectory: ./ansible
        sshKey: ${{ env.KEYFILE }}
    - 
      name: Cluster Timeout
      run: |
        echo "Will destroy cluster in ${{ env.TF_LIFETIME }}."
        sleep ${{ env.TF_LIFETIME }}
    - 
      if: always()
      name: Terraform Destroy
      uses: labrats-work/action-terraform@main
      with:
        verb: destroy
        init: yes
        varsFile: default.tfvars
        backendConfigFile: config.remote.tfbackend
        sshKey: ${{ env.KEYFILE }}
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    