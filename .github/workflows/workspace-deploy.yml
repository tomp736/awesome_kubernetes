name: 'Workspace Deploy'

permissions:
  contents: read

jobs:
  terraform:
    name: 'terraform'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/labrats-work/ops-images/omnibus:latest
    environment: ${{ inputs.ENVIRONMENT }}
    concurrency: 
      group: ${{ inputs.ENVIRONMENT }}
      cancel-in-progress: false
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3
      with:
        ref: 
    - 
      name: Create default.tfvars file
      run: |
        echo "hcloud_token = \"${{ secrets.HCLOUD_TOKEN }}\"" > terraform/default.tfvars
        echo "public_key = \"${{ inputs.PUBLIC_KEY }}\"" >> terraform/default.tfvars
    - 
      name: Apply changes for remote backend
      run: |
        echo "Create default.tfrc file"
        echo "# default.tfrc" > default.tfrc
        echo "credentials \"app.terraform.io\" {" >> default.tfrc
        echo "  token = \"${{ secrets.TFCLOUD_TOKEN }}\"" >> default.tfrc
        echo "}" >> default.tfrc

        echo "Create config.remote.tfbackend"
        echo "# config.remote.tfbackend" > terraform/config.remote.tfbackend
        echo "workspaces { name = \"kubernetes_at_hetzner_${{ inputs.ENVIRONMENT }}\" }" >> terraform/config.remote.tfbackend
        echo "hostname     = \"app.terraform.io\"" >> terraform/config.remote.tfbackend
        echo "organization = \"labrats-work\"" >> terraform/config.remote.tfbackend 

        echo "Create config.remote.tfbackend"
        sed -i 's|local|remote|g' terraform/providers.tf
    - 
      name: Update Terraform Ref
      run: |
        sed -i 's|modules-terraform.git//modules/cloud-init?ref=main|modules-terraform.git//modules/cloud-init?ref=${{ inputs.TF_MODULES_REF }}|g' terraform/main.tf
        sed -i 's|modules-terraform.git//modules/hetzner/network?ref=main|modules-terraform.git//modules/hetzner/network?ref=${{ inputs.TF_MODULES_REF }}|g' terraform/main.tf
        sed -i 's|modules-terraform.git//modules/hetzner/node?ref=main|modules-terraform.git//modules/hetzner/node?ref=${{ inputs.TF_MODULES_REF }}|g' terraform/main.tf
    - 
      name: Terraform Init
      run: terraform -chdir=terraform init -backend-config=config.remote.tfbackend
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      name: Terraform Plan
      run: terraform -chdir=terraform plan --var-file=default.tfvars -out=tfplan -input=false
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      name: Terraform Apply
      run: |      
        eval `ssh-agent`
        echo "${KEYFILE}" | ssh-add -
        terraform -chdir=terraform apply tfplan
      env:
        KEYFILE: ${{ secrets.SSH_KEY }}
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      uses: actions/upload-artifact@v2
      with:
        name: terraform-output
        path: terraform/ansible_hosts

  ansible-site:
    needs: terraform
    name: 'ansible-site'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/labrats-work/ops-images/omnibus:latest
    environment: ${{ inputs.ENVIRONMENT }}
    concurrency: 
      group: ${{ inputs.ENVIRONMENT }}
      cancel-in-progress: false
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3
    - 
      uses: actions/download-artifact@v2
      with:
        name: terraform-output
    - 
      name: Copy Ansible Hosts
      run: |
        cp ansible_hosts ansible/inventory/hosts
    - 
      name: Update Ansible Ref
      run: |
        cd ./ansible
        yq -i '.collections[] |= select(.name == "https://github.com/labrats-work/modules-ansible.git").version="${{ inputs.ANSIBLE_MODULES_REF }}"' requirements.yml
    - 
      name: Cache Ansible Galaxy Collections
      uses: actions/cache@v2
      with:
        path: ~/.ansible/collections
        key: ${{ runner.os }}-ansible-galaxy-collections-${{ hashFiles('**/requirements.yml') }}
    -     
      name: Ansible Galaxy Install
      run: |
        cd ./ansible
        ansible-galaxy install -fr requirements.yml
    - 
      name: Ansible Playbook
      run: |
        eval `ssh-agent`
        echo "${KEYFILE}" | ssh-add -
        cd ./ansible
        ansible-playbook -i inventory/hosts site.yml
      env:
        KEYFILE: ${{ secrets.SSH_KEY }}
        FLUX_INIT_OWNER: tomp736
        FLUX_INIT_REPO: kubernetes_at_hetzner_flux
        FLUX_INIT_PATH: ./clusters/${{ inputs.FLUX_WORKSPACE }}
        FLUX_INIT_TOKEN: ${{ secrets.FLUX_INIT_TOKEN }}  

  ansible-cluster:
    needs: 
      - terraform
      - ansible-site
    name: 'ansible-cluster'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/labrats-work/ops-images/omnibus:latest
    environment: ${{ inputs.ENVIRONMENT }}
    concurrency: 
      group: ${{ inputs.ENVIRONMENT }}
      cancel-in-progress: false
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3
    - 
      uses: actions/download-artifact@v2
      with:
        name: terraform-output
    - 
      name: Copy Ansible Hosts
      run: |
        cp ansible_hosts ansible/inventory/hosts
    - 
      name: Update Ansible Ref
      run: |
        cd ./ansible
        yq -i '.collections[] |= select(.name == "https://github.com/labrats-work/modules-ansible.git").version="${{ inputs.ANSIBLE_MODULES_REF }}"' requirements.yml
    - 
      name: Cache Ansible Galaxy Collections
      uses: actions/cache@v2
      with:
        path: ~/.ansible/collections
        key: ${{ runner.os }}-ansible-galaxy-collections-${{ hashFiles('**/requirements.yml') }}
    -     
      name: Ansible Galaxy Install
      run: |
        cd ./ansible
        ansible-galaxy install -fr requirements.yml
    - 
      name: Ansible Playbook
      run: |
        eval `ssh-agent`
        echo "${KEYFILE}" | ssh-add -
        cd ./ansible
        ansible-playbook -i inventory/hosts cluster.yml
      env:
        KEYFILE: ${{ secrets.SSH_KEY }}
        FLUX_INIT_OWNER: tomp736
        FLUX_INIT_REPO: kubernetes_at_hetzner_flux
        FLUX_INIT_PATH: ./clusters/${{ inputs.FLUX_WORKSPACE }}
        FLUX_INIT_TOKEN: ${{ secrets.FLUX_INIT_TOKEN }}  

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        type: string
        description: Terraform Remote Workspace
        required: true
      REPO_REF:
        type: string
        description: Repository Ref
        required: true
      TF_MODULES_REF:
        type: string
        description: Terraform Modules Ref
        required: true
      ANSIBLE_MODULES_REF:
        type: string
        description: Ansible Modules Ref
        required: true
      FLUX_WORKSPACE:
        type: string
        description: Flux Workspace
        required: true
      PUBLIC_KEY:
        type: string
        description: Public key to add to servers.
        required: true
      TERRAFORM_APPLY:
        type: boolean
        description: Apply Terraform
        required: true
        default: false
      ANSIBLE_APPLY:
        type: boolean
        description: Apply Ansible
        required: true
        default: false